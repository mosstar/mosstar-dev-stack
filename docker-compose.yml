name: mosstar-dev-stack

services:
  traefik:
    image: traefik:v2.11.4
    restart: always
    environment:
      TZ: "Europe/Istanbul"
    command:
      - "--providers.docker=true"
      - "--api.insecure=true"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.postgres.address=:5432"
      - "--entrypoints.redis.address=:6379"
      - "--entrypoints.rabbitmq.address=:5672"
    ports:
      - "${HTTP_PORT}:80" # HTTP
      - "${POSTGRES_PORT}:5432" # Postgres
      - "${REDIS_PORT}:6379" # Redis
      - "${RABBITMQ_PORT}:5672" # RabbitMQ
    labels:
      - traefik.enable=true

      - traefik.http.routers.traefik.rule=Host(`traefik.local`)
      - traefik.http.services.traefik.loadbalancer.server.port=8080
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  portainer:
    image: portainer/portainer-ce:2.20.3
    restart: always
    command: -H unix:///var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.local`)
      - traefik.http.routers.portainer.entrypoints=http
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - portainer-data:/data

  postgres:
    build:
      context: ./images/postgres
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_USER: ${DEFAULT_USER}
      POSTGRES_PASSWORD: ${DEFAULT_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.postgres.rule=HostSNI(`*`)
      - traefik.tcp.routers.postgres.entrypoints=postgres
      - traefik.tcp.services.postgres.loadbalancer.server.port=5432
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis:
    image: redis:7.2.5-alpine
    restart: always
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.redis.rule=HostSNI(`*`)
      - traefik.tcp.routers.redis.entrypoints=redis
      - traefik.tcp.services.redis.loadbalancer.server.port=6379
    volumes:
      - redis-data:/data

  geoserver:
    image: kartoza/geoserver:2.25.0
    restart: always
    environment:
      GEOSERVER_ADMIN_USER: ${DEFAULT_USER}
      GEOSERVER_ADMIN_PASSWORD: ${DEFAULT_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.geoserver.rule=Host(`geoserver.local`)
      - traefik.http.routers.geoserver.entrypoints=http
      - traefik.http.services.geoserver.loadbalancer.server.port=8080
    volumes:
      - geoserver-data:/opt/geoserver/data_dir

  minio:
    image: minio/minio:RELEASE.2024-06-04T19-20-08Z
    restart: always
    environment:
      MINIO_ROOT_USER: ${DEFAULT_USER}
      MINIO_ROOT_PASSWORD: ${DEFAULT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: http://minio-console.local
    command: server /data --console-address ":9001"
    labels:
      - traefik.enable=true

      - traefik.http.routers.minio.rule=Host(`minio.local`)
      - traefik.http.routers.minio.entrypoints=http
      - traefik.http.routers.minio.service=minio
      - traefik.http.services.minio.loadbalancer.server.port=9000

      - traefik.http.routers.minio-console.rule=Host(`minio-console.local`)
      - traefik.http.routers.minio-console.entrypoints=http
      - traefik.http.routers.minio-console.service=minio-console
      - traefik.http.services.minio-console.loadbalancer.server.port=9001
    volumes:
      - minio-data:/data

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    restart: always
    depends_on:
      - postgres
    command: "start-dev"
    environment:
      KC_DB: postgres
      KC_DB_URL: "jdbc:postgresql://postgres:5432/keycloak"
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak

      KC_HOSTNAME: keycloak.local
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true

      KEYCLOAK_ADMIN: ${DEFAULT_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${DEFAULT_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak.rule=Host(`keycloak.local`)
      - traefik.http.routers.keycloak.entrypoints=http
      - traefik.http.services.keycloak.loadbalancer.server.port=8080
    volumes:
      - keycloak-data:/opt/keycloak

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.audit.enabled=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=${DEFAULT_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.elasticsearch.rule=Host(`elasticsearch.local`)
      - traefik.http.routers.elasticsearch.entrypoints=http
      - traefik.http.services.elasticsearch.loadbalancer.server.port=9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    restart: always
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${DEFAULT_PASSWORD}
      SERVER_PUBLICBASEURL: http://kibana.local
    labels:
      - traefik.enable=true
      - traefik.http.routers.kibana.rule=Host(`kibana.local`)
      - traefik.http.routers.kibana.entrypoints=http
      - traefik.http.services.kibana.loadbalancer.server.port=5601

  apm-server:
    image: docker.elastic.co/apm/apm-server:${ELASTIC_VERSION}
    restart: always
    depends_on:
      - elasticsearch
      - kibana
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana:5601
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
        -E output.elasticsearch.username=elastic
        -E output.elasticsearch.password=$DEFAULT_PASSWORD
        -E apm-server.auth.secret_token=$ELASTIC_APM_SECRET_TOKEN
    labels:
      - traefik.enable=true
      - traefik.http.routers.apm-server.rule=Host(`apm.local`)
      - traefik.http.routers.apm-server.entrypoints=http
      - traefik.http.services.apm-server.loadbalancer.server.port=8200

  rabbitmq:
    image: rabbitmq:3.13.3-management-alpine
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${DEFAULT_PASSWORD}
    labels:
        - traefik.enable=true

        - traefik.tcp.routers.rabbitmq.rule=HostSNI(`*`)
        - traefik.tcp.routers.rabbitmq.entrypoints=rabbitmq
        - traefik.tcp.routers.rabbitmq.service=rabbitmq
        - traefik.tcp.services.rabbitmq.loadbalancer.server.port=5672

        - traefik.http.routers.rabbitmq-console.rule=Host(`rabbitmq.local`)
        - traefik.http.routers.rabbitmq-console.entrypoints=http
        - traefik.http.routers.rabbitmq-console.service=rabbitmq-console
        - traefik.http.services.rabbitmq-console.loadbalancer.server.port=15672
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

volumes:
  portainer-data:
  postgres-data:
  redis-data:
  geoserver-data:
  minio-data:
  keycloak-data:
  elasticsearch-data:
  rabbitmq-data:
